apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-acm-hyper-apply-hyper-deployment
spec:
  params:
  - name: targetManagedCluster
    default: local-cluster
    description: The managedcluster to target to become a managementcluster
    type: string
  results:
  - name: hdStatus
    description: Status of the HyperShift deployment
  steps:
  - args:
    - |-
      #!/bin/bash
      set -e

      HYPERSHIFT_CREDS=$(oc get secret hypershift-pipelines-hypershift-operator-oidc-provider-s3-credentials -o yaml | yq eval 'del(.metadata)' - | yq eval '.metadata.name = "hypershift-operator-oidc-provider-s3-credentials"' -)
      ACM_CREDS=$(oc get secret hypershift-pipelines-acm-creds  -o yaml | yq eval 'del(.metadata)' - | yq eval '.metadata.name = "acm-credentials"' -)

      _LOGIN_CMD=$(cat login.sh)
      eval "$_LOGIN_CMD"

      echo "$HYPERSHIFT_CREDS" | oc apply -f - -n $(inputs.params.targetManagedCluster)
      echo "$ACM_CREDS" | oc apply -f - -n $(inputs.params.targetManagedCluster)

      echo "Applying HyperShift ManagedClusterAddon ..."
      oc apply -f samples/hypershift-pipelines/resources/hypershift-addon.yaml -n $(inputs.params.targetManagedCluster)
      
      echo "Waiting for pod to be available"
      sleep 60

      oc project multicluster-engine
      oc create ns clusters || true
      HD_NAME="$(inputs.params.targetManagedCluster)-hd"
      _TEMPLATE="apiVersion: cluster.open-cluster-management.io/v1alpha1
      kind: HypershiftDeployment
      metadata:
        name: $HD_NAME
        namespace: $(inputs.params.targetManagedCluster)
      spec:
        hostingCluster: $(inputs.params.targetManagedCluster)
        hostingNamespace: clusters
        infrastructure:
          cloudProvider:
            name: acm-credentials
          configure: True
          platform:
            aws:
              region: us-east-2"
      echo "$_TEMPLATE" | oc apply -f -

      echo "Waiting for HyperShift deployment to complete ..."
      _ATTEMPTS=0
      until oc get hypershiftdeployment -n $(inputs.params.targetManagedCluster) $HD_NAME -o json | jq '(.status.conditions | map(select(.type == "HostedClusterProgress")))[0].reason' | grep "Completed";
      do 
          echo "$_ATTEMPTS/20: Waiting for HyperShift deployment to be complete... Sleeping 1 min"
          _ATTEMPTS=$((_ATTEMPTS + 1))
          sleep 60;
          if [[ $_ATTEMPTS == 20 ]]; then
              echo "The HyperShiftDeployment did not come up in the allotted time"
              oc get hypershiftdeployment -n $(inputs.params.targetManagedCluster) $HD_NAME -o yaml 

              oc get hd -n $(inputs.params.targetManagedCluster) $HD_NAME  > $(results.hdStatus.path)               
              exit 0
          fi
      done
      echo "HyperShiftDeployment is running on $(inputs.params.targetManagedCluster)"
      oc get hd -n $(inputs.params.targetManagedCluster) $HD_NAME -o yaml

      echo "Validating HostedCluster created ManagedCluster on hub cluster ..."
      _ATTEMPTS=0
      echo "Waiting for ManagedCluster to be created ..."
      until oc get managedcluster | grep "$HD_NAME";
      do 
          echo "$_ATTEMPTS/10: Waiting for HostedCluster ManagedCluster to be available... Sleeping 1 min"
          _ATTEMPTS=$((_ATTEMPTS + 1))
          sleep 60;
          if [[ $_ATTEMPTS == 10 ]]; then
              echo "The managedcluster not come up in the allotted time"
              oc get hd -n $(inputs.params.targetManagedCluster) $HD_NAME -o yaml
              exit 1
          fi
      done
      echo "ManagedCluster is running on hub cluster"

      echo "HyperShiftDeployment deployed successfully"
      oc get hd -n $(inputs.params.targetManagedCluster) $HD_NAME  > $(results.hdStatus.path)
      exit 0
    command:
    - /bin/bash
    - -c
    image: quay.io/zkayyali812/ocm-utils:latest
    name: apply
    resources: {}
    workingDir: /workspace/source
  workspaces:
  - name: source
